// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum Role {
  customer
  promotor
}

model User {
  id                 String        @id @default(cuid())
  username           String        @unique @db.VarChar(55)
  fullname           String        @db.VarChar(85)
  email              String        @unique @db.VarChar(85)
  password           String
  role               Role          @default(customer)
  phone_no           String        @db.VarChar(25)
  id_card            String        @unique @db.VarChar(16)
  gender             Gender?
  address            String?       @db.VarChar(255)
  date_of_birth      DateTime?
  avatar             String?
  referral_code      String        @unique
  reference_code     String?
  points             Int           @default(0)
  points_expiry_date DateTime?
  bank_acc_no        String?       @db.VarChar(75)
  event              Event[]
  review             Review[]
  transaction        Transaction[]
  voucher            Voucher?
  reset_token        String?       @db.Text
  is_verified        Boolean       @default(false)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt

  @@index([username, fullname, email, role])
  @@map("users")
}

enum Venue_type {
  indoor
  outdoor
}

enum Status_event {
  active
  finished
}

// enum Discount_amount {
//   no_disc @map("0%")
//   disc_5  @map("5%")
//   disc_10 @map("10%")
//   disc_15 @map("15%")
//   disc_20 @map("20%")
//   disc_25 @map("25%")
//   disc_30 @map("30%")
//   disc_35 @map("35%")
//   disc_40 @map("40%")
//   disc_45 @map("45%")
//   disc_50 @map("50%")
//   disc_60 @map("60%")
//   disc_70 @map("70%")
//   disc_80 @map("80%")
// }

enum Category {
  Accoustic
  SemiPunk
  Koplo
}

model Event {
  id       String @id @default(cuid())
  title    String @db.VarChar(100)
  location String
  city     String @db.VarChar(55)
  zip_code Int

  venue_type   Venue_type
  details      String       @db.Text
  roster       String
  scheduled_at DateTime     @db.Date
  start_time   DateTime     @db.Time(0)
  end_time     DateTime     @db.Time(0)
  status       Status_event @default(active)
  category     Category

  // discount_amount Discount_amount @default(no_disc)
  discount_amount Int?
  ticket_price    Float @db.Double
  ticket_amount   Int

  assigned_pic String?
  pic_phone_no String? @db.VarChar(25)

  user_id     String
  user        User          @relation(fields: [user_id], references: [id])
  image_url   String
  // event_image Event_image[]
  review      Review[]
  transaction Transaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([title, location, scheduled_at, status, venue_type, city])
  @@map("events")
}

model Review {
  review   String @db.Text
  rating   Int
  user_id  String
  event_id String
  user     User   @relation(fields: [user_id], references: [id])
  event    Event  @relation(fields: [event_id], references: [id])

  @@id([user_id, event_id])
  @@map("reviews")
}

// model Event_image {
//   id        String @id @default(cuid())
//   image_url String
//   event     Event  @relation(fields: [event_id], references: [id])
//   event_id  String

//   @@map("event_images")
// }

enum Status_transaction {
  unpaid
  pending
  success
}

model Transaction {
  id             String             @id @default(cuid())
  ticket_bought  Int
  total_price    Float              @db.Double
  transfer_proof Bytes              @db.Blob
  status         Status_transaction
  user_id        String
  event_id       String
  voucher_id     String             @unique
  user           User               @relation(fields: [user_id], references: [id])
  event          Event              @relation(fields: [event_id], references: [id])
  voucher        Voucher            @relation(fields: [voucher_id], references: [id])
  created_at     DateTime           @default(now())
  paid_at        DateTime           @updatedAt

  @@index([status])
  @@map("transactions")
}

model Voucher {
  id          String       @id @default(cuid())
  amount      Float        @db.Double
  is_valid    Boolean      @default(true)
  user_id     String       @unique
  user        User         @relation(fields: [user_id], references: [id])
  transaction Transaction?
  used_at     DateTime?

  @@map("vouchers")
}
